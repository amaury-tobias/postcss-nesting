{"version":3,"file":"index.es.mjs","sources":["lib/shift-nodes-before-parent.js","lib/cleanup-parent.js","lib/valid-selector.js","lib/merge-selectors.js","lib/rule-within-rule.js","lib/nest-rule-within-rule.js","lib/valid-atrules.js","lib/atrule-within-rule.js","lib/merge-params.js","lib/atrule-within-atrule.js","lib/walk.js","index.js"],"sourcesContent":["export default function shiftNodesBeforeParent(node) {\n\tconst parent = node.parent;\n\tconst index = parent.index(node);\n\n\t// conditionally move previous siblings into a clone of the parent\n\tif (index) {\n\t\tparent.cloneBefore().removeAll().append(\n\t\t\tparent.nodes.slice(0, index)\n\t\t)\n\t}\n\n\t// move the current node before the parent (and after the conditional clone)\n\tparent.before(node);\n\n\treturn parent;\n}\n","export default function cleanupParent(parent) {\n\tif (!parent.nodes.length) {\n\t\tparent.remove();\n\t}\n}\n","// a valid selector is an ampersand followed by a non-word character or nothing\nexport default /&(?:[^\\w-|]|$)/;\n\nexport const replaceable = /&/g;\n","import { replaceable } from './valid-selector';\n\nexport default function mergeSelectors(fromSelectors, toSelectors) {\n\treturn fromSelectors.reduce(\n\t\t(selectors, fromSelector) => selectors.concat(\n\t\t\ttoSelectors.map(\n\t\t\t\ttoSelector => toSelector.replace(replaceable, fromSelector)\n\t\t\t)\n\t\t),\n\t\t[]\n\t);\n}\n","import shiftNodesBeforeParent from './shift-nodes-before-parent';\nimport cleanupParent from './cleanup-parent';\nimport mergeSelectors from './merge-selectors';\nimport validSelector from './valid-selector';\n\nexport default function transformRuleWithinRule(node) {\n\t// move previous siblings and the node to before the parent\n\tconst parent = shiftNodesBeforeParent(node);\n\n\t// update the selectors of the node to be merged with the parent\n\tnode.selectors = mergeSelectors(parent.selectors, node.selectors);\n\n\t// merge similar rules back together\n\t// eslint-disable-next-line no-extra-parens\n\tconst areSameRule = (\n\t\tnode.type === 'rule' && parent.type === 'rule' && node.selector === parent.selector ||\n\t\tnode.type === 'atrule' && parent.type === 'atrule' && node.params === parent.params\n\t);\n\n\tif (areSameRule) {\n\t\tnode.append(...parent.nodes);\n\t}\n\n\t// conditionally cleanup an empty parent rule\n\tcleanupParent(parent);\n}\n\nexport const isRuleWithinRule = node => node.type === 'rule' && Object(node.parent).type === 'rule' && node.selectors.every(\n\tselector => selector.trim().lastIndexOf('&') === 0 && validSelector.test(selector)\n);\n","import { list } from 'postcss';\nimport shiftNodesBeforeParent from './shift-nodes-before-parent';\nimport cleanupParent from './cleanup-parent';\nimport mergeSelectors from './merge-selectors';\nimport validSelector from './valid-selector';\nimport walk from './walk';\n\nconst { comma } = list;\n\nexport default function transformNestRuleWithinRule(node) {\n\t// move previous siblings and the node to before the parent\n\tconst parent = shiftNodesBeforeParent(node);\n\n\t// clone the parent as a new rule with children appended to it\n\tconst rule = parent.clone().removeAll().append(node.nodes);\n\n\t// replace the node with the new rule\n\tnode.replaceWith(rule);\n\n\t// update the selectors of the node to be merged with the parent\n\trule.selectors = mergeSelectors(parent.selectors, comma(node.params));\n\n\t// conditionally cleanup an empty parent rule\n\tcleanupParent(parent);\n\n\t// walk the children of the new rule\n\twalk(rule);\n}\n\nexport const isNestRuleWithinRule = node => node.type === 'atrule' && node.name === 'nest' && Object(node.parent).type === 'rule' && comma(node.params).every(\n\tselector => selector.split('&').length === 2 && validSelector.test(selector)\n);\n","export default ['document', 'media', 'supports'];\n","import shiftNodesBeforeParent from './shift-nodes-before-parent';\nimport cleanupParent from './cleanup-parent';\nimport validAtrules from './valid-atrules';\nimport walk from './walk';\n\n/*\n * DEPRECATED: In v7.0.0 these features will be removed as they are not part of\n * the nesting proposal.\n */\n\nexport default function atruleWithinRule(node) {\n\t// move previous siblings and the node to before the parent\n\tconst parent = shiftNodesBeforeParent(node);\n\n\t// clone the parent as a new rule with children appended to it\n\tconst rule = parent.clone().removeAll().append(node.nodes);\n\n\t// append the new rule to the node\n\tnode.append(rule);\n\n\t// conditionally cleanup an empty parent rule\n\tcleanupParent(parent);\n\n\t// walk the children of the new rule\n\twalk(rule);\n}\n\nexport const isAtruleWithinRule = node => node.type === 'atrule' && validAtrules.includes(node.name) && Object(node.parent).type === 'rule';\n","import { list } from 'postcss';\n\nconst { comma } = list;\n\nexport default function mergeParams(fromParams, toParams) {\n\treturn comma(fromParams).map(\n\t\tparams1 => comma(toParams).map(\n\t\t\tparams2 => `${params1} and ${params2}`\n\t\t).join(', ')\n\t).join(', ');\n}\n","import shiftNodesBeforeParent from './shift-nodes-before-parent';\nimport mergeParams from './merge-params';\nimport cleanupParent from './cleanup-parent';\n\n/*\n * DEPRECATED: In v7.0.0 these features will be removed as they are not part of\n * the nesting proposal.\n */\n\nexport default function transformAtruleWithinAtrule(node) {\n\t// move previous siblings and the node to before the parent\n\tconst parent = shiftNodesBeforeParent(node);\n\n\t// update the params of the node to be merged with the parent\n\tnode.params = mergeParams(parent.params, node.params);\n\n\t// conditionally cleanup an empty parent rule\n\tcleanupParent(parent);\n}\n\nimport validAtrules from './valid-atrules';\n\nexport const isAtruleWithinAtrule = node => node.type === 'atrule' && validAtrules.includes(node.name) && Object(node.parent).type === 'atrule' && node.name === node.parent.name;\n","import transformRuleWithinRule, { isRuleWithinRule} from './rule-within-rule';\nimport transformNestRuleWithinRule, { isNestRuleWithinRule } from './nest-rule-within-rule';\nimport transformAtruleWithinRule, { isAtruleWithinRule } from './atrule-within-rule';\nimport transformAtruleWithinAtrule, { isAtruleWithinAtrule } from './atrule-within-atrule';\n\nexport default function walk(node) {\n\tnode.nodes.slice(0).forEach(child => {\n\t\tif (child.parent === node) {\n\t\t\tif (isRuleWithinRule(child)) {\n\t\t\t\ttransformRuleWithinRule(child);\n\t\t\t} else if (isNestRuleWithinRule(child)) {\n\t\t\t\ttransformNestRuleWithinRule(child);\n\t\t\t} else if (isAtruleWithinRule(child)) {\n\t\t\t\ttransformAtruleWithinRule(child);\n\t\t\t} else if (isAtruleWithinAtrule(child)) {\n\t\t\t\ttransformAtruleWithinAtrule(child);\n\t\t\t}\n\n\t\t\tif (Object(child.nodes).length) {\n\t\t\t\twalk(child);\n\t\t\t}\n\t\t}\n\t});\n}\n","import walk from './lib/walk';\n\nconst postcssNesting = () => {\n\treturn {\n\t\tpostcssPlugin: 'postcss-nesting',\n\t\tOnce(root) {\n\t\t\twalk(root);\n\t\t}\n\t}\n}\n\npostcssNesting.postcss = true;\n\nexport default postcssNesting;\n"],"names":["shiftNodesBeforeParent","node","parent","index","cloneBefore","removeAll","append","nodes","slice","before","cleanupParent","length","remove","replaceable","mergeSelectors","fromSelectors","toSelectors","reduce","selectors","fromSelector","concat","map","toSelector","replace","transformRuleWithinRule","areSameRule","type","selector","params","isRuleWithinRule","Object","every","trim","lastIndexOf","validSelector","test","comma","list","transformNestRuleWithinRule","rule","clone","replaceWith","walk","isNestRuleWithinRule","name","split","atruleWithinRule","isAtruleWithinRule","validAtrules","includes","mergeParams","fromParams","toParams","params1","params2","join","transformAtruleWithinAtrule","isAtruleWithinAtrule","forEach","child","transformAtruleWithinRule","postcssNesting","postcssPlugin","Once","root","postcss"],"mappings":"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"}